x = c(0,3,-2)
y = c(-1,2,-2)
data$x = c(0,3,-2)
data = as.data.frame()
data = as.data.frame(x = c(0,3,-2))
View(data)
data$y = c(-1,2,-2)
View(data)
colnames(data) <- c(x,y)
colnames(data)
data = data.frame(x = c(0,3,-2), y = c(-1,2,2))
View(data)
data = data.frame(x = c(0,3,-2), y = c(-1,2,2))
model1 <- lm(x ~ y, data = )
summary(model1)
31/26
data = data.frame(y = c(0,3,-2), x = c(-1,2,2))
model1 <- lm(x ~ y, data = )
summary(model1)
# Residuals:
#   1       2       3
# 0.4615 -0.1154 -0.3462
#
# Coefficients:
#   Estimate Std. Error t value Pr(>|t|)
# (Intercept)   0.7308     0.3462   2.111    0.282
# y             1.1923     0.1999   5.966    0.106
#
# Residual standard error: 0.5883 on 1 degrees of freedom
# Multiple R-squared:  0.9727,	Adjusted R-squared:  0.9453
# F-statistic: 35.59 on 1 and 1 DF,  p-value: 0.1057
31/26
19/26
predict(model1)
predict(model1)-data$x
sum(predict(model1)-data$x)
sigmoid <- function(a){
return(1/(1+exp(-a))
}
# sigmoid function
sigmoid <- function(a){
return(1/(1+exp(-a)))
}
log(e)
log(1)
log(01)
log(10)
# Unit 3, The Framingham Heart Study
# Video 3
# Read in the dataset
framingham = read.csv("framingham.csv")
# Look at structure
str(framingham)
# Load the library caTools
library(caTools)
# Randomly split the data into training and testing sets
set.seed(1000)
split = sample.split(framingham$TenYearCHD, SplitRatio = 0.65)
# Split up the data using subset
train = subset(framingham, split==TRUE)
test = subset(framingham, split==FALSE)
# Logistic Regression Model
framinghamLog = glm(TenYearCHD ~ ., data = train, family=binomial)
summary(framinghamLog)
# Unit 3, The Framingham Heart Study
# Video 3
# Read in the dataset
setwd("/home/musigma/MOOC/15.071/Week3/Heart/")
framingham = read.csv("framingham.csv")
# Look at structure
str(framingham)
# Load the library caTools
library(caTools)
# Randomly split the data into training and testing sets
set.seed(1000)
split = sample.split(framingham$TenYearCHD, SplitRatio = 0.65)
# Split up the data using subset
train = subset(framingham, split==TRUE)
test = subset(framingham, split==FALSE)
# Logistic Regression Model
framinghamLog = glm(TenYearCHD ~ ., data = train, family=binomial)
summary(framinghamLog)
predictTest = predict(framinghamLog, type="response", newdata=test)
# Confusion matrix with threshold of 0.5
table(test$TenYearCHD, predictTest > 0.5)
11/(11+187)
1069/(1069+6)
setwd("/home/musigma/MOOC/15.071/Week4/Supreme Court/")
stevens = read.csv("stevens.csv")
str(stevens)
# Split the data
library(caTools)
set.seed(3000)
spl = sample.split(stevens$Reverse, SplitRatio = 0.7)
Train = subset(stevens, spl==TRUE)
Test = subset(stevens, spl==FALSE)
install.packages("rpart")
library(rpart)
install.packages("rpart.plot")
library(rpart.plot)
StevensTree = rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method="class", minbucket=25)
prp(StevensTree)
# Make predictions
PredictCART = predict(StevensTree, newdata = Test, type = "class")
table(Test$Reverse, PredictCART)
(41+71)/(41+36+22+71)
library(ROCR)
PredictROC = predict(StevensTree, newdata = Test)
PredictROC
pred = prediction(PredictROC[,2], Test$Reverse)
perf = performance(pred, "tpr", "fpr")
plot(perf)
performance(pred, "auc")
plot(performance(pred, "auc"))
(performance(pred, "auc")@y.values)
as.numeric(performance(pred, "auc")@y.values)
AUC = as.numeric(performance(pred, "auc")@y.values)
prp(StevensTree)
StevensTree2 = rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method = "class", minbucket = 5)
summary(StevensTree2)
prp(StevensTree2)
StevensTree3 = rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method = "class", minbucket = 100)
prp(StevensTree3)
install.packages("randomForest")
library(randomForest)
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, ntree=200, nodesize=25 )
View(Test)
Train$Reverse = as.factor(Train$Reverse)
Test$Reverse = as.factor(Test$Reverse)
# Try again
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, ntree=200, nodesize=25 )
# Make predictions
PredictForest = predict(StevensForest, newdata = Test)
table(Test$Reverse, PredictForest)
(40+74)/(40+37+19+74)
set.seed(100)
StevensForest2 <- randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, nodesize = 25, ntree = 200)
PredictForest2 <- predict(StevensForest2, newdata = Test)
summary(PredictForest2)
table(Test$Reverse, PredictForest2)
set.seed(200)
StevensForest3 <- randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, nodesize = 25, ntree = 200)
PredictForest3 <- predict(StevensForest3, newdata = Test)
table(Test$Reverse, PredictForest3)
(43+74)/(43+74+19+34)
(44+76)/(44+76+17+33)
install.packages("caret")
library(caret)
install.packages("e1071")
library(e1071)
library(caret)
library(caret)
install.packages("caret")
install.packages("class")
install.packages("ggplot2")
install.packages("caret")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(caret)
install.packages("caret")
install.packages("caret")
library(car)
install.packages("caret")
library(caret)
install.packages("e1071")
library(e1071)
