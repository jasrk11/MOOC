x = c(0,3,-2)
y = c(-1,2,-2)
data$x = c(0,3,-2)
data = as.data.frame()
data = as.data.frame(x = c(0,3,-2))
View(data)
data$y = c(-1,2,-2)
View(data)
colnames(data) <- c(x,y)
colnames(data)
data = data.frame(x = c(0,3,-2), y = c(-1,2,2))
View(data)
data = data.frame(x = c(0,3,-2), y = c(-1,2,2))
model1 <- lm(x ~ y, data = )
summary(model1)
31/26
data = data.frame(y = c(0,3,-2), x = c(-1,2,2))
model1 <- lm(x ~ y, data = )
summary(model1)
# Residuals:
#   1       2       3
# 0.4615 -0.1154 -0.3462
#
# Coefficients:
#   Estimate Std. Error t value Pr(>|t|)
# (Intercept)   0.7308     0.3462   2.111    0.282
# y             1.1923     0.1999   5.966    0.106
#
# Residual standard error: 0.5883 on 1 degrees of freedom
# Multiple R-squared:  0.9727,	Adjusted R-squared:  0.9453
# F-statistic: 35.59 on 1 and 1 DF,  p-value: 0.1057
31/26
19/26
predict(model1)
predict(model1)-data$x
sum(predict(model1)-data$x)
sigmoid <- function(a){
return(1/(1+exp(-a))
}
# sigmoid function
sigmoid <- function(a){
return(1/(1+exp(-a)))
}
log(e)
log(1)
log(01)
log(10)
version
rm(list=ls())
setwd("/home/musigma/MOOC/15.071/Week4/Predicting Earnings from census data/")
census = read.csv("census.csv")
split = sample.split(census$over50k, SplitRatio = 0.6)
library(caTools)
set.seed(2000)
split = sample.split(census$over50k, SplitRatio = 0.6)
train = subset(census, split == TRUE)
test = subset(census, split == FALSE)
LogModel = glm(over50k ~., data = train, family = binomial)
summary(LogModel)
predictLog = predict(LogModel, newdata=test, type="response")
table(test$over50k, predictLog>=0.5)
(9051+662)/nrow(test)
library(ROCR)
as.numeric(performance(prediction(predictLog, test$over50k), "auc")@y.values)
table(test$over50k, predictLog>=0.5)
(9051+1888)/(nrow(test))
(9051+662)/nrow(test)
library(rpart)
library(rpart.plot)
CARTmodel = rpart(over50k ~., data = train, method = "class")
prp(CARTmodel)
predict(CARTmodel, newdata = test, type = "class")
CARTpred <- predict(CARTmodel, newdata = test, type = "class")
table(test$over50k, CARTpred)
(9243=1596)/(nrow(test))
(9243=1596)/nrow(test)
(9243+1596)/nrow(test)
CARTpred_probaility = predict(CARTmodel, newdata = test)
CARTpred_probaility
ROCpred = prediction(CARTpred_probaility[,2], test$over50k)
plot(performance(prediction(predictLog, test$over50k), "tpr", "fpr"))
performance(ROCpred, "tpr", "fpr")
plot(performance(ROCpred, "tpr", "fpr"))
performance(ROCpred, "auc")@y.values
set.seed(1)
trainSmall = train[sample(nrow(train), 2000), ]
sample(10,3)
library(randomForest)
library(randomForest)
set.seed(1)
forest <- randomForest(over50k ~., data = trainSmall)
forestPred = predict(forest, newdata = test)
table(test$over50k, forestPred)
(9586+1093)/nrow(test)
vu = varUsed(forest, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(forest$forest$xlevels[vusorted$ix]))
varImpPlot(forest)
library(caret)
library(e1071)
set.seed(2)
numFolds = trainControl(method= 'cv', number = 10)
cpGrid = expand.grid(.cp = seq(0.002,0.1,0.002))
train(over50k ~., data = train, method = "rpart", trControl = numFolds, tuneGrid = cpGrid)
CARTmodel2 <- rpart(over50k ~., data = train, cp = 0.002, method = "class")
CARTmodel2Predict <- predict(CARTmodel2, newdata=test, type="class")
table(CARTmodel2Predict)
table(test$over50k, CARTmodel2Predict)
(9178+1838)/nrow(test)
prp(CARTmodel2Predict)
prp(CARTmodel2)
